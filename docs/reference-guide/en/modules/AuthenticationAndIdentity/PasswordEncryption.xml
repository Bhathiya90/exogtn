<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../../Reference_Guide.ent">
%BOOK_ENTITIES;
]>
<section id="sect-Reference_Guide-Password-encryption">
	<title>Password Encryption</title>
	<note>
	<para>
		Usernames and passwords are stored in clear text. The <emphasis role="bold">Remember Me</emphasis> feature of eXo Platform uses a token mechanism to authenticate returning users without requiring any their explicit logins. 
		However, to authenticate these users, the token needs to store their usernames and passwords in clear text in JCR.
	</para>
	</note>
	<para>
	Administrators have 2 options available to avoid this risk:
	</para>
    <itemizedlist>
	<listitem>
	<para>
	<emphasis role="bold">The first way:</emphasis> Enable the <emphasis role="bold">Remember Me</emphasis> feature by removing the corresponding checkbox in: <emphasis>$TOMCAT_HOME/webapps/portal.war/login/jsp/login.jsp</emphasis> and <emphasis>$TOMCAT_HOME/webapps/portal.war/groovy/portal/webui/UILoginForm.gtmpl</emphasis>.
	</para>
	</listitem>
	<listitem>
	<para><emphasis role="bold">The second way:</emphasis> Encode passwords prior to saving them to JCR via the following steps:
	</para>
	<note>
	<para>
	This option requires administrators to provide a custom subclass of <emphasis>org.exoplatform.web.security.security.AbstractCodec</emphasis> and to set up a codec implementation with <emphasis>CookieTokenService</emphasis>.
	</para>
	</note>
	</listitem>
	</itemizedlist>
	<procedure>
	<step>
	<para>
	Create a <emphasis>Javaclass</emphasis> which is similar as below:
	</para>
	<programlisting language="java">
package org.example.codec;

import org.exoplatform.container.xml.InitParams;
import org.exoplatform.web.security.security.AbstractCodec;
import org.exoplatform.web.security.security.CookieTokenService;
import org.picocontainer.Startable;

public class ExampleCodec extends AbstractCodec implements Startable
{
   private String simpleParam;
   private CookieTokenService cookieTokenService;
   
   public ExampleCodec(InitParams params, CookieTokenService cookieTokenService)
   {
      simpleParam = params.getValueParam("encodingParam").getValue();
      this.cookieTokenService = cookieTokenService;
   }
   
   public void start()
   {
      cookieTokenService.setupCodec(this);
   }

   public void stop()
   {      
   }
   
   /**
    * Very simple encoding algorithm used only for demonstration purposes. 
    * You should use stronger algorithm in real production environment. 
    */
   public String encode(String plainInput)
   {
      return plainInput + simpleParam;
   }
   
   public String decode(String encodedInput)
   {
      return encodedInput.substring(0, encodedInput.length() - simpleParam.length());
   }

}
	</programlisting>
	</step>
	<step>
	<para>
	Compile the class and package it into a <emphasis>.jar</emphasis> file. In this example, you will call a <emphasis>.jar</emphasis> file named <emphasis role="italic">codec-example.jar</emphasis>.
	</para>
	</step>
	<step>
	<para>
	Create a <emphasis role="italic">conf/portal/configuration.xml</emphasis> file within the <emphasis role="italic">codec-example.jar</emphasis> similar to the example below. This allows the portal kernel to find and use the new codec implementation.
	</para>

<programlisting language="xml"><![CDATA[
 <?xml version="1.0" encoding="ISO-8859-1"?>
<configuration xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.exoplaform.org/xml/ns/kernel_1_2.xsd http://www.exoplaform.org/xml/ns/kernel_1_2.xsd"
xmlns="http://www.exoplaform.org/xml/ns/kernel_1_2.xsd"> 	
<component>
<key>org.example.codec.ExampleCodec</key>
<type>org.example.codec.ExampleCodec</type>
<init-params>
 <value-param>
<name>encodingParam</name>
<value>aaa</value>
 </value-param>
</init-params>
</component>
</configuration> ]]>
</programlisting>
</step>
	<step>
	<para>
	Deploy <emphasis role="italic">codec-example.jar</emphasis> into your <emphasis role="italic"><![CDATA[$TOMCAT_HOME/lib/]]></emphasis> directory.	
	</para>
	</step>
	<step>
	<para>
	Start (or restart) your platform. Now, the passwords written to JCR will be encoded and NOT in plain text.
	</para>
	</step>
	</procedure>
</section>